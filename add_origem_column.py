#!/usr/bin/env python3
"""
Script para adicionar coluna 'origem' na tabela notas_fiscais
"""

import os
from sqlalchemy import create_engine, text
from dotenv import load_dotenv
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def add_origem_column():
    """Adiciona coluna origem na tabela notas_fiscais"""
    
    # Carregar configura√ß√µes
    load_dotenv()
    database_url = os.getenv('DATABASE_URL')
    
    if not database_url:
        logger.error("DATABASE_URL n√£o encontrada no arquivo .env")
        return False
    
    try:
        # Conectar ao banco
        engine = create_engine(database_url)
        
        with engine.connect() as conn:
            # Verificar se a coluna j√° existe
            logger.info("Verificando se a coluna 'origem' j√° existe...")
            
            result = conn.execute(text("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'notas_fiscais' 
                AND column_name = 'origem'
            """))
            
            if result.fetchone():
                logger.info("‚úÖ Coluna 'origem' j√° existe na tabela notas_fiscais")
                return True
            
            # Adicionar a coluna
            logger.info("Adicionando coluna 'origem' na tabela notas_fiscais...")
            
            conn.execute(text("""
                ALTER TABLE notas_fiscais 
                ADD COLUMN origem VARCHAR(20) DEFAULT 'upload'
            """))
            
            # Confirmar a transa√ß√£o
            conn.commit()
            
            logger.info("‚úÖ Coluna 'origem' adicionada com sucesso!")
            
            # Verificar quantos registros existem
            result = conn.execute(text("SELECT COUNT(*) FROM notas_fiscais"))
            count = result.fetchone()[0]
            
            logger.info(f"üìä Total de registros na tabela: {count}")
            
            if count > 0:
                logger.info("‚ÑπÔ∏è  Registros existentes foram marcados como 'upload' por padr√£o")
                logger.info("‚ÑπÔ∏è  Novos registros do email ser√£o marcados como 'email'")
            
            return True
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao adicionar coluna: {e}")
        return False

if __name__ == "__main__":
    print("=== ADICIONANDO COLUNA ORIGEM ===")
    success = add_origem_column()
    
    if success:
        print("\n‚úÖ Opera√ß√£o conclu√≠da com sucesso!")
        print("A coluna 'origem' foi adicionada √† tabela notas_fiscais")
        print("- Registros existentes: marcados como 'upload'")
        print("- Novos registros do email: ser√£o marcados como 'email'")
    else:
        print("\n‚ùå Falha na opera√ß√£o!")